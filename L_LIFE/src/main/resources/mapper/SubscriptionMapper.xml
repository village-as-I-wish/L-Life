<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kosa.com.suntofu.L_LIFE.subscription.dao.SubscriptionDao">

    <insert id="insertSubscription" parameterType="SubscriptionVo">
        {CALL
            DECLARE
                v_today DATE := TRUNC(SYSDATE);
                v_member_id NUMBER := #{mId};
                v_subscription_count NUMBER := 0;

            BEGIN
                SELECT COUNT(*)
                INTO v_subscription_count
                FROM SUBSCRIPTION
                WHERE M_ID = v_member_id AND SUBSCRIBE_END_DATE >= v_today and subscribe_status = 1 and subscribe_type = 0;

                IF v_subscription_count > 0 THEN
                        RAISE_APPLICATION_ERROR(-20001, 'Subscription already exists');
                ELSE
                    INSERT INTO SUBSCRIPTION (
                        SUBSCRIBE_TYPE,
                        M_ID,
                        SUBSCRIBE_START_DATE,
                        SUBSCRIBE_END_DATE,
                        SUBSCRIPTION_PLAN_ID,
                        SUBSCRIBE_POINT,
                        SUBSCRIBE_STATUS
                    )
                    VALUES (
                        #{subscriptionType},
                        v_member_id,
                        v_today,
                        ADD_MONTHS(SYSDATE, 1),
                        #{subscriptionPlanId},
                        #{subscriptionPoint},
                        #{subscriptionStatus}
                    );
            END IF;
            END
        }
    </insert>


<!-- 프리미엄 결제 로직  -->
    <!--  재고 업데이트-->
    <update id="updateStock" parameterType="PayFurnitureVo">
            UPDATE STOCK
            SET
                STOCK_AMOUNT = STOCK_AMOUNT - #{quantity}
            WHERE
                LF_OPT_ID = #{lfOptId} AND LF_ID = #{lfId}
    </update>

    <!--    장바구니삭제-->
    <delete id="deleteCart" parameterType="PayFurnitureVo">
        DELETE FROM CART
        WHERE
            LF_OPT_ID = #{lfOptId}
          AND
            LF_ID = #{lfId}
          AND
            M_ID = #{memberId}
    </delete>

    <!--     구독 내역 데이터 삽입 -->
    <insert id="insertPrLFSubscription" parameterType="PayFurnitureVo">

        INSERT INTO LFSUBSCRIPTIONLIST
        (LF_OPT_ID, LF_ID, SUBSCRIPTION_ID, M_ID, SUB_LF_START_DATE, SUB_LF_END_DATE)
        VALUES
            (#{lfOptId}, #{lfId}, #{subscriptionId}, #{memberId}, sysdate, add_months(sysdate, #{lfPrMinPeriod}))
    </insert>

        <!--    배송내역 추가-->
    <insert id="insertdelivery" parameterType="PayFurnitureVo">
        <selectKey keyProperty="subLfId" resultType="int" order="BEFORE">
            SELECT NVL(MAX(sub_lf_id), 0) FROM LFSUBSCRIPTIONLIST
        </selectKey>
        INSERT INTO DELIVERY (SUB_LF_ID, M_ID, DELIVERY_DATE, DELIVERY_TIME)
        VALUES ( #{subLfId}, #{memberId}, #{deliveryDate}, #{deliveryTime})
    </insert>



<!--  스탠다드 결제 로직-->
    <!-- 재고 업데이트-->
    <update id="stUpdateStock" parameterType="PayFurnitureVo">
        UPDATE STOCK
        SET
            STOCK_AMOUNT = STOCK_AMOUNT - 1
        WHERE
            LF_OPT_ID = #{lfOptId} AND LF_ID = #{lfId}
    </update>

    <!-- 장바구니삭제-->
    <delete id="stDeleteCart" parameterType="PayFurnitureVo">
        DELETE FROM CART
        WHERE
            LF_OPT_ID = #{lfOptId}
          AND
            LF_ID = #{lfId}
          AND
            M_ID = #{memberId}
    </delete>

    <!--     구독 내역 데이터 삽입 -->
    <insert id="stInsertStLFSubscription" parameterType="PayFurnitureVo">

        INSERT INTO LFSUBSCRIPTIONLIST
        (LF_OPT_ID, LF_ID, SUBSCRIPTION_ID, M_ID, SUB_LF_START_DATE, SUB_LF_END_DATE)
        VALUES
            (#{lfOptId}, #{lfId}, #{subscriptionId}, #{memberId}, sysdate, add_months(sysdate, 1))
    </insert>

    <!--    배송내역 추가-->
    <insert id="stInsertDelivery" parameterType="PayFurnitureVo">
        <selectKey keyProperty="subLfId" resultType="int" order="BEFORE">
            SELECT NVL(MAX(sub_lf_id), 0) FROM LFSUBSCRIPTIONLIST
        </selectKey>
        INSERT INTO DELIVERY (SUB_LF_ID, M_ID, DELIVERY_DATE, DELIVERY_TIME, DELIVERY_ADDRESS)
        VALUES ( #{subLfId}, #{memberId}, #{deliveryDate}, #{deliveryTime}, #{deliveryAddress})
    </insert>

    <!-- 구독 포인트 업데이트-->
    <update id="stUpdateSubPoint" parameterType="PayFurnitureVo">
        UPDATE SUBSCRIPTION
        SET
            SUBSCRIBE_POINT = SUBSCRIBE_POINT - #{totalCoin}
        WHERE
            SUBSCRIPTION_ID = #{subscriptionId}
    </update>

    <update id="renewStSubscription">
        <![CDATA[
            UPDATE
                SUBSCRIPTION
            SET
                SUBSCRIBE_STATUS = 0
            WHERE
                SUBSCRIBE_END_DATE < SYSDATE
        ]]>
    </update>




<!--    <update id="updateStock" parameterType="java.util.List">-->
<!--        <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close="; END;">-->
<!--            UPDATE STOCK-->
<!--            SET STOCK_AMOUNT = STOCK_AMOUNT - #{item.quantity}-->
<!--            <where>-->
<!--                LF_OPT_ID = #{item.lfOptId} AND LF_ID = #{item.lfId}-->
<!--            </where>-->
<!--        </foreach>-->
<!--    </update>-->

<!--    <delete id="deleteCart" parameterType="java.util.List">-->
<!--        DELETE FROM CART-->
<!--        WHERE-->
<!--        <foreach collection="list" item="item" separator="OR">-->
<!--            (LF_OPT_ID = #{item.lfOptId} AND LF_ID = #{item.lfId} AND M_ID = #{item.memberId})-->
<!--        </foreach>-->
<!--    </delete>-->

<!--&lt;!&ndash;     구독 내역 데이터 삽입 &ndash;&gt;-->
<!--    <insert id="insertPrLFSubscription" parameterType="java.util.List">-->
<!--        INSERT INTO LFSUBSCRIPTIONLIST (LF_OPT_ID, LF_ID, SUBSCRIPTION_ID, M_ID, SUB_LF_START_DATE, SUB_LF_END_DATE)-->
<!--        <foreach collection="list" item="item" separator="UNION ALL">-->
<!--            SELECT #{item.lfOptId}, #{item.lfId}, #{item.subscriptionId}, #{item.memberId}, sysdate, add_months(sysdate, #{item.lfPrMinPeriod}) FROM DUAL-->
<!--        </foreach>-->
<!--    </insert>-->
<!--    -->
<!--    <insert id="insertdelivery" parameterType="java.util.List">-->
<!--        INSERT INTO DELIVERY (SUB_LF_ID, M_ID)-->
<!--        <foreach collection="list" item="item" separator="UNION ALL">-->
<!--            SELECT #{sub_lf_id} #{item.memberId} FROM DUAL-->
<!--        </foreach>-->
<!--    </insert>-->




</mapper>