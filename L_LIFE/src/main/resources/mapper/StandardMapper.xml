<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kosa.com.suntofu.L_LIFE.standard.dao.StandardDAO">

    <!-- 스탠다드 상품 리스트 메인 -->
    <select id = "selectAllStandard">
        SELECT
            lf.lf_id,
            lf.lf_img_main,
            lfb.lf_brand_name,
            lf.lf_name,
            lf.lf_st_coin
        FROM
            LLifeFurniture lf
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        WHERE
            lf_sub_type = 0
        OFFSET #{offset} ROWS FETCH NEXT 20 ROWS ONLY
    </select>

    <!-- pagination 전체 상품 개수 구하기 -->
    <select id="selectAllStandardPagination" resultType="_int">
        SELECT
            count(*)
        FROM
            LLifeFurniture lf
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        WHERE
            lf_sub_type = 0
    </select>

    <!-- 라이브 리스트 가져오기 -->
    <select id = "selectAllLiveStream" resultType="StandardLiveVo">
        SELECT
            LS.L_STREAM_ID,
            LS.l_stream_name,
            LS.L_STREAM_IMG,
            LS.L_STREAM_COMMENT,
            LS.l_stream_time,
            TO_CHAR(LS.l_stream_time, 'MM/DD') AS stream_date,
            TO_CHAR(LS.l_stream_time, 'HH24:MI') AS stream_time,
            LFP.lf_package_name,
            LFP.lf_package_img,
            LFP.lf_package_st_coin
        FROM
            LiveStream LS
                LEFT JOIN
            LSProduct LSP ON LSP.l_stream_id = LS.l_stream_id
                LEFT JOIN
            LFPACKAGE LFP on LSP.LF_PACKAGE_ID = LFP.LF_PACKAGE_ID

    </select>

    <!-- 스탠다드 상품 카테고리 필터링 -->
    <select id="selectStandardProductByCategory" parameterType="StandardPaginationVo"  resultType="StandardVo">
        SELECT
            lf.lf_id,
            lf.lf_img_main,
            lfb.lf_brand_name,
            lf.lf_name,
            lf.lf_st_coin,
            lfc.lf_category_id
        FROM
            LLifeFurniture lf
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        JOIN
            LFurnitureCategory lfc ON lf.lf_category_id = lfc.lf_category_id
        WHERE
            lfc.lf_category_id = #{lfCategoryId}
        AND
            lf_sub_type = 0
        OFFSET #{offset} ROWS FETCH NEXT 20 ROWS ONLY
    </select>

    <select id="selectStandardProductByCategoryByPagination" parameterType="StandardPaginationVo" resultType="_int">
        SELECT
            count(*)
        FROM
            LLifeFurniture lf
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        JOIN
            LFurnitureCategory lfc ON lf.lf_category_id = lfc.lf_category_id
        WHERE
            lfc.lf_category_id = #{lfCategoryId}
        AND
            lf_sub_type = 0
    </select>

    <!-- 스탠다드 상품 검색 -->
    <select id="selectStandardProductByKeyword" parameterType="StandardPaginationVo" resultType="StandardVo">
        SELECT
            lf.lf_id,
            lf.lf_img_main,
            lfb.lf_brand_name,
            lf.lf_name,
            lf.lf_st_coin
        FROM
            LLifeFurniture lf
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        WHERE
            lf.lf_sub_type = 0
        AND
            (UPPER(lfb.lf_brand_name) LIKE '%' || UPPER(#{keyword}) || '%'
             OR UPPER(lf.lf_name) LIKE '%' || UPPER(#{keyword}) || '%')
        OFFSET #{offset} ROWS FETCH NEXT 20 ROWS ONLY
    </select>

    <select id="selectStandardProductByKeywordByPagination" parameterType="StandardPaginationVo" resultType="_int">
        SELECT
            count(*)
        FROM
            LLifeFurniture lf
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        WHERE
            lf.lf_sub_type = 0
        AND
            (UPPER(lfb.lf_brand_name) LIKE '%' || UPPER(#{keyword}) || '%'
            OR UPPER(lf.lf_name) LIKE '%' || UPPER(#{keyword}) || '%')
    </select>

    <!-- 스탠다드 사이드 필터링 (브랜드, 분위기, 코인개수) 검색 -->
    <select id="searchStandardProductByFilter" resultType="StandardVo">
        SELECT
            lf.lf_id,
            lf.lf_img_main,
            lfb.lf_brand_name,
            lf.lf_name,
            lf.lf_st_coin,
            lfb.lf_brand_id
        FROM
            LLifeFurniture lf
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        JOIN
            LFurnitureMood lfm ON lf.lf_mood_id = lfm.lf_mood_id
        WHERE
            lf.lf_sub_type = 0
        <!-- 브랜드 조건 -->
        <if test="lfBrandIds != null and lfBrandIds.size() > 0">
            AND lfb.lf_brand_id IN
            <foreach collection="lfBrandIds" item="brandId" open="(" separator="," close=")">
                #{brandId}
            </foreach>
        </if>
        <!-- 분위기 조건 -->
        <if test="lfMoodIds != null and lfMoodIds.size() > 0">
            AND lfm.lf_mood_id IN
            <foreach collection="lfMoodIds" item="moodId" open="(" separator="," close=")">
                #{moodId}
            </foreach>
        </if>
        <!-- 코인 조건 -->
        <if test="minCoin != null and maxCoin != null">
            AND lf.lf_st_coin BETWEEN #{minCoin} AND #{maxCoin}
        </if>
        OFFSET #{offset} ROWS FETCH NEXT 20 ROWS ONLY
    </select>

    <resultMap id="StandardDetailResultMap" type="StandardDetailVo">
        <id property="lfId" column="lf_id" />
        <result property="lfSubType" column="lf_sub_type" />
        <result property="lfStCoin" column="lf_st_coin" />
        <result property="mId" column="M_ID" />
        <result property="mName" column="M_NAME" />
        <result property="lfSubIssub" column="lf_sub_issub" />
        <result property="lfName" column="lf_name" />
        <result property="lfImgMain" column="lf_img_main" />
        <result property="lfBrandName" column="lf_brand_name" />
        <result property="lfSubComment" column="lf_sub_comment" />
        <result property="lfStGrade" column="lf_st_grade" />

        <collection property="refurImgUrl" ofType="RefurImgVo">
            <id property="refurImgId" column="refur_img_id" />
            <result property="refurImgUrl" column="refur_img_url" />
        </collection>

        <collection property="detailImgUrl" ofType="DetailImgVo">
            <id property="lfImgId" column="lf_img_id" />
            <result property="lfImgUrl" column="lf_img_url" />
            <result property="imgComment" column="img_comment" />
        </collection>
    </resultMap>

    <!-- 스탠다드 상세페이지 -->
    <select id = "selectStandardDetailById" resultMap="StandardDetailResultMap">
        SELECT
            lf.lf_id,
            lf.lf_img_main,
            lfb.lf_brand_name,
            lf.lf_name,
            lf.lf_st_coin,
            lf.lf_st_grade,
            lf.lf_sub_comment,
            rfImg.refur_img_id,
            rfImg.REFUR_IMG_URL,
            lfImg.lf_img_id,
            lfImg.lf_img_url,
            lfImg.img_comment
        FROM
            LLifeFurniture lf
        LEFT JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        JOIN
            LfurnitureImage lfImg on lf.lf_id = lfImg.lf_id
        LEFT JOIN
            RefurbishImage rfImg ON lf.lf_id = rfImg.lf_id
        WHERE
            lf_sub_type = 0
        AND
            lf.lf_id = #{lfId}
    </select>

    <!-- 스탠다드 상세페이지 옵션 -->
    <select id="selectStandardOptionById" resultType="StandardOptionVo">
        SELECT
            s.lf_id,
            s.stock_amount,
            lfo.lf_opt_id,
            lfo.lf_opt_name
        FROM
            Stock s
        JOIN
            LFurnitureOption lfo ON s.lf_opt_id = lfo.lf_opt_id
        WHERE
            s.lf_id = #{lfId}
    </select>

    <!-- 스탠다드 추천(구독가능한 제품 + 해당 카테고리 제품을 랜덤으로 추천) -->
    <select id="selectStandardRecommendation" resultType="StandardVo">
        SELECT
            lf.lf_id,
            lf.lf_img_main,
            lfb.lf_brand_name,
            lf.lf_name,
            lf.lf_st_coin
        FROM
            LLifeFurniture lf
        INNER JOIN
            LFurnitureCategory lfc ON lf.lf_category_id = lfc.lf_category_id
        JOIN
            LFurnitureBrand lfb ON lf.lf_brand_id = lfb.lf_brand_id
        JOIN
            LLifeFurniture recommend ON lf.lf_category_id = recommend.lf_category_id
        WHERE
            recommend.lf_sub_issub = 0
        AND
            lf.lf_sub_type = 0
        AND
            recommend.lf_id IN (
                SELECT #{lfId}
                FROM LLifeFurniture
                WHERE lf_category_id = lf.lf_category_id
                AND lf_sub_issub = 0
        )
        ORDER BY DBMS_RANDOM.VALUE
    </select>

    <!--스탠다드 재입고 알림 신청-->
    <select id="selectStandardStockAmount" resultType="StandardRestockVo">
        SELECT
            s.lf_opt_id,
            s.lf_id,
            s.stock_amount
        FROM
            Stock s
        WHERE
            s.lf_opt_id = #{lfOptId}
        AND
            s.lf_id = #{lfId}
    </select>

    <!-- 재입고 알림 신청 시 예약 테이블에 insert -->
    <insert id="insertOptionToReservation" parameterType="StandardOptionVo">
        INSERT INTO
            reservation (m_id, lf_id, lf_opt_id)
        VALUES
            (#{mId}, #{lfId}, #{lfOptId})
    </insert>

    <!-- 장바구니 테이블에 insert -->
    <insert id="insertProductToCart" parameterType="StandardSubscriptionVo">
        {CALL
            DECLARE
                v_member_id NUMBER :=0;
            BEGIN
                SELECT count(SUBSCRIPTION.m_id)
                INTO v_member_id
                FROM SUBSCRIPTION
                where m_id = #{mId};

            IF v_member_id > 0 THEN
                INSERT INTO CART (lf_id, m_id, lf_opt_id)
                VALUES (#{lfId}, #{mId}, #{lfOptId});
            ELSE
                RAISE_APPLICATION_ERROR(-20002, 'No subscription found for the user');
        END IF;
        END
        }
    </insert>


    <insert id="insertReview" useGeneratedKeys="false" parameterType="ReviewRequestVo" >
        insert into review(lf_review_title, lf_review_content, m_id, lf_id, lf_review_rating, lf_review_ser_rating, lf_review_del_rating)
        values(#{lfReviewTitle}, #{lfReviewContent}, #{mId}, #{lfId}, #{lfReviewRating},#{lfReviewSerRating},#{lfReviewDelRating})

        <selectKey keyProperty="lfReviewId" resultType="int" order="AFTER">
            SELECT lf_review_id FROM review WHERE m_id = #{mId} and lf_id = #{lfId}
        </selectKey>

    </insert>

    <insert id="insertReviewImg">
        <selectKey keyProperty="maxSeq" resultType="int" order="BEFORE">
            SELECT NVL(MAX(r_img_id), 0) FROM reviewImage
        </selectKey>
        INSERT INTO reviewImage (r_img_id, r_img_url, lf_review_id)
        <foreach collection="list" item="item" index="idx" separator="UNION ALL">
            SELECT #{maxSeq} + #{idx} +1, #{item.rImgUrl}, #{item.lfReviewId} FROM DUAL
        </foreach>
    </insert>


    <!-- 리뷰 정보 -->
    <select id="selectAllReviews" resultMap="ReviewWithImages">
        SELECT
            r.LF_REVIEW_ID,
            r.LF_REVIEW_TITLE,
            r.LF_REVIEW_CONTENT,
            r.M_ID,
            m.M_NAME,
            r.LF_REVIEW_TYPE,
            r.LF_REVIEW_DATE,
            r.LF_ID,
            r.LF_REVIEW_RATING,
            r.LF_REVIEW_SER_RATING,
            r.LF_REVIEW_DEL_RATING,
            i.R_IMG_ID,
            i.R_IMG_URL
        FROM REVIEW r
                 LEFT JOIN REVIEWIMAGE i ON r.LF_REVIEW_ID = i.LF_REVIEW_ID
                 LEFT JOIN MEMBER m ON r.M_ID = m.M_ID
        WHERE r.LF_ID = #{lfId}
        ORDER BY r.LF_REVIEW_DATE DESC
    </select>

    <!-- 리뷰와 이미지를 매핑하는 resultMap -->
    <resultMap id="ReviewWithImages" type="ReviewVo">
        <id property="lfReviewId" column="LF_REVIEW_ID" />
        <result property="lfReviewTitle" column="LF_REVIEW_TITLE" />
        <result property="lfReviewContent" column="LF_REVIEW_CONTENT" />
        <result property="mId" column="M_ID" />
        <result property="mName" column="M_NAME" />
        <result property="lfReviewType" column="LF_REVIEW_TYPE" />
        <result property="lfReviewDate" column="LF_REVIEW_DATE" />
        <result property="lfId" column="LF_ID" />
        <result property="lfReviewRating" column="LF_REVIEW_RATING" />
        <result property="lfReviewSerRating" column="LF_REVIEW_SER_RATING" />
        <result property="lfReviewDelRating" column="LF_REVIEW_DEL_RATING" />
        <collection property="lfReviewImgs" ofType="ReviewImgVo">
            <id property="rImgId" column="R_IMG_ID" />
            <result property="rImgUrl" column="R_IMG_URL" />
        </collection>
    </resultMap>


    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="int">
        delete from REVIEW where lf_review_id =#{lfReviewId}
    </delete>

</mapper>
